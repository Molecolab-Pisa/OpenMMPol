stages:
    - docker-building
    - configure
    - compile-lib
    - compile-bin
    - test
    - packaging
    - documentation
    - coverage
variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE
    
build_docker_env:
    stage: docker-building
    image: docker:git
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_BUILD_TOKEN $CI_REGISTRY
        - docker build --load -t $IMAGE_TAG .
        - docker push $IMAGE_TAG
    only:
        refs:
            - pushes
        changes:
            - Dockerfile

cmake-config:
    stage: configure
    image: $CI_REGISTRY_IMAGE:latest
    script:
        - mkdir build
        - cd build
        - cmake -DCMAKE_BUILD_TYPE=DEBUG ..
    artifacts:
        paths:
            - build

cmake-config-intel:
    stage: configure
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - source /opt/intel/oneapi/setvars.sh
    script:
        - mkdir build_intel
        - cd build_intel
        - cmake -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icx -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_BUILD_TYPE=RELEASE -DHDF5_ROOT=/opt/intel/hdf5-1.12.2 ..
    artifacts:
        paths:
            - build_intel
    only:
        - schedules
        - pushes

cmake-config-nvidia:
    stage: configure
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - export NVARCH=`uname -s`_`uname -m`
        - export NVCOMPILERS=/opt/nvidia/hpc_sdk
        - export PATH=$NVCOMPILERS/$NVARCH/2024/compilers/bin:$PATH
    script:
        - mkdir build_nvidia
        - cd build_nvidia
        - cmake -DCMAKE_C_COMPILER=`which nvc` -DCMAKE_CXX_COMPILER=`which nvcc` -DCMAKE_Fortran_COMPILER=`which nvfortran` -DCMAKE_BUILD_TYPE=RELEASE -DHDF5_ROOT=/opt/nvidia/hdf5-1.12.2 ..
    artifacts:
        paths:
            - build_nvidia
    only:
        - schedules
        - pushes

make-lib:
    stage: compile-lib
    image: $CI_REGISTRY_IMAGE:latest
    script:
        - cd build
        - make openmmpol
    artifacts:
        paths:
            - build
    only:
        - pushes
        - schedules

compile-C:
    stage: compile-bin
    image: $CI_REGISTRY_IMAGE:latest
    script:
        - cd build
        - make C_test_programs
        - make utility_programs
    artifacts:
        paths:
            - build/bin
    only:
        - pushes
        - schedules

compile-FORTRAN:
    stage: compile-bin
    image: $CI_REGISTRY_IMAGE:latest
    script:
        - cd build
        - make F03_test_programs
    artifacts:
        paths:
            - build/bin
    only:
        - pushes
        - schedules

make-lib-intel:
    stage: compile-lib
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - source /opt/intel/oneapi/setvars.sh
    script:
        - cd build_intel
        - make openmmpol
    artifacts:
        paths:
            - build_intel
    only:
        - schedules

compile-C-intel:
    stage: compile-bin
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - source /opt/intel/oneapi/setvars.sh
    script:
        - cd build_intel
        - make C_test_programs
        - make utility_programs
    artifacts:
        paths:
            - build_intel/bin
    only:
        - schedules

compile-FORTRAN-intel:
    stage: compile-bin
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - source /opt/intel/oneapi/setvars.sh
    script:
        - cd build_intel
        - make F03_test_programs
    artifacts:
        paths:
            - build_intel/bin
    only:
        - schedules

make-lib-nvidia:
    stage: compile-lib
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - export NVARCH=`uname -s`_`uname -m`
        - export NVCOMPILERS=/opt/nvidia/hpc_sdk
        - export PATH=$NVCOMPILERS/$NVARCH/2022/compilers/bin:$PATH
    script:
        - cd build_nvidia
        - make openmmpol
    artifacts:
        paths:
            - build_nvidia
    only:
        - schedules

compile-C-nvidia:
    stage: compile-bin
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - export NVARCH=`uname -s`_`uname -m`
        - export NVCOMPILERS=/opt/nvidia/hpc_sdk
        - export PATH=$NVCOMPILERS/$NVARCH/2022/compilers/bin:$PATH
    script:
        - cd build_nvidia
        - make C_test_programs
        - make utility_programs
    artifacts:
        paths:
            - build_nvidia/bin
    only:
        - schedules

compile-FORTRAN-nvidia:
    stage: compile-bin
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - export NVARCH=`uname -s`_`uname -m`
        - export NVCOMPILERS=/opt/nvidia/hpc_sdk
        - export PATH=$NVCOMPILERS/$NVARCH/2022/compilers/bin:$PATH
    script:
        - cd build_nvidia
        - make F03_test_programs
    artifacts:
        paths:
            - build_nvidia/bin
    only:
        - schedules

build-python-pkg:
    stage: packaging
    image: $CI_REGISTRY_IMAGE:latest
    only: 
        - tags
    script:
        - pip install wheel twine build
        - python3 -m build
        - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python3 -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    artifacts:
        paths:
            - dist/*

make-doc:
    stage: documentation
    image: $CI_REGISTRY_IMAGE:latest
    script:
        - ford DOC.md 
    artifacts:
        paths:
            - doc
    only:
        - pushes

run_short_test:
    stage: test
    image: $CI_REGISTRY_IMAGE:latest
    script:
        - cd build
        - ctest -R 'NMA|1crn|2d94' -E memcheck --output-on-failure
    only:
        - pushes

run_tests:
    stage: test
    image: $CI_REGISTRY_IMAGE:latest
    script:
        - cd build
        - ctest --output-on-failure
    only:
        - schedules

run_tests-intel:
    stage: test
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - source /opt/intel/oneapi/setvars.sh
    script:
        - cd build_intel
        - ctest --output-on-failure
    only:
        - schedules

run_tests-nvidia:
    stage: test
    image: $CI_REGISTRY_IMAGE:latest
    before_script:
        - export FORTRANOPT=no_minus_zero
    script:
        - cd build_nvidia
        - ctest -E memcheck --output-on-failure
    only:
        - schedules

code_coverage:
    stage: coverage
    image: $CI_REGISTRY_IMAGE:latest
    script:
        - mkdir build_cov coverage
        - cd build_cov
        - cmake .. -DCMAKE_BUILD_TYPE=COVERAGE
        - make 
        - ctest -E "memcheck|1AO6"
        - find . -iname '*.gcda' | xargs gcov > gcov.out
        - echo "CODECOVERAGE" `cat gcov.out | tail -n 1 | grep --only-matching -P '.{0,5}%'`
        - lcov --gcov-tool gcov --capture --directory . --output-file ../coverage/coverage.info
        - cd ../coverage
        - lcov_cobertura coverage.info -o coverage.xml
        - genhtml --output-directory html coverage.info
    coverage: '/CODECOVERAGE \d+.\d+%/'
    artifacts:
        paths:
            - coverage
        reports:
            coverage_report:
                coverage_format: cobertura
                path: coverage/coverage.xml
